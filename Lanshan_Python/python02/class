# Python基础语法(2)



## 函数

### 1.1 函数的概念

>什么是函数？

*函数*:是一个`被命名的`、独立的、`完成特定功能的代码段`，其可能给调用它的程序一个`返回值`。
通俗的说函数就是把一段可以`实现某种功能`的代码封装起来, 想要使用这个功能就可以直接调用函数。

`被命名的`：在Python中，大部分函数都是有名函数。
`完成特定功能的代码段`：函数的功能要专一，专门为了完成某个功能而定义。
`返回值`：当函数执行完毕后，其可能会返回一个值给函数的调用处。

函数的主要作用：
① 模块化编程
② 代码重用

函数中的几个重要概念：

函数
参数
返回值

函数语法：
```
def 函数名([参数, ..]):
    代码1
    代码2
    ...
    [return 具体的返回值]
```
### 1.2 函数定义与调用

Python函数需要使用`def`关键字来定义。使用方式有两步：

（1）先定义

（2）后调用

当然了，函数在使用时，特点：

>（1）先定义，后调用；
>（2）不调用，不执行；
>（3）调用一次，执行一次。


调用函数：
```
函数名()
```

`实例：`
（1）编写一个show()函数，并在函数中输出：bug虐我千百遍, 我待bug如初恋。

（2）调用函数，观察执行结果。
```
  # 1.定义
def show():
    print("Hello World!")

# 2.调用
show()  # 1.写对函数名;   2.()

# 扩展
def show():
    # 代码
    pass
```

### 1.2 函数的参数
当在定义函数时，设定了参数，则可称该函数为：有参函数。反之，没有参数的函数，称为：无参函数。

定义有参数的函数，语法:

```
def 函数名(参数1,参数2,...):  # 形参
	代码1
    代码2
    ...
```

调用函数，语法：
```
函数名(参数值1,参数值2,...)  # 实参
```
>说明：
>（1）形参是指形式参数，表示在定义函数时的参数；
>（2）实参是指实际参数，表示在调用函数时传递的参数值，具有实际意义。

*实例：*
（1）定义一个函数，用于求解两个数之和；

（2）接着，调用函数并执行程序，观察效果。
```
# 1.定义函数
def get_sum(a,b):
    sum = a + b
    print(f"两个数之和为:{sum}")

# 2.调用函数
get_sum(10,20)
```
*总结：*
（1）当定义了有参数的函数时，调用函数也需要传递参数值；

（2）注意：当给有参函数传递参数时，要关注参数的三要素：个数、类型、顺序。

### 1.3 函数的返回值

函数的返回值指的是：当函数完成一件事情后，最后要返回给函数的结果。

返回值语法：
```
def 函数名([参数1, 参数2, ...]):
	代码1
	代码2
	...
	return 值
```
>（1）若要给函数返回结果，需要使用return关键字；
>（2）return关键字的作用：把结果返回给函数；结束函数；
>（3）当函数没有返回值时，默认返回None。

*实例：*
```
# 1.求解积
def get_multiply(a, b):
    ret = a * b
    return ret

print(get_multiply(10,20))   # print()
print('-'*50)

# 2.求差、和
def get_sub_sum(a, b):
    ret1 = a -b
    ret2 = a + b
    return ret1,ret2   # 元组
    
result = get_sub_sum(30,14)
print(result)
print('-'*50)

# 3.输出：人生苦短，我用Python(输出没有返回值)
def show():
    print("蓝山工作室")
print(show())
```

### 1.4 说明文档
说明文档指的是：在定义函数的第一行，加上多行注释。这样的操作，可以让函数更加规范化。

当添加了说明文档后，在调用函数时，就能查看到函数的作用提示。

当需要看函数的说明文档的具体内容时，语法：
```
help(函数名)
```
### 2. 函数的嵌套调用
### 2.1 嵌套调用及执行流程
函数的嵌套调用指的是：在一个函数中，调用了另一个函数。

嵌套调用语法：
```
def 函数1():
	代码
	...

def 函数2():
	代码
	# 调用函数1
	函数1()
	...
	# 在函数2中，调用了函数1。
```

```
# 1.定义func()
def func():
    print("Hello World!\n")

# 2.定义test()、调用func()
def test():
    print("111")
    func()
    print("000")
    
# 3.调用test()
test() 
```

```
# 1.定义函数
def line():
    print("-"*40)

# 2.N条横线
def print_lines(num):
    i = 0
    while i < num:
        # 嵌套调用
        line()
        i += 1

print_lines(10)
```
#### 内置函数

[Python 内置函数](https://docs.python.org/zh-cn/3/library/functions.html)

#### 导入模块中的函数

[Python 标准库](https://docs.python.org/zh-cn/3/library/index.html)

```python
import math


print(math.floor(32.9))
```

```python
from datetime import datetime

print(datetime.now())
```
#### 自己编写函数

```python
def add(a: int, b: int) -> int:
    return a + b


a = int(input("a="))
b = int(input("b="))
print("a+b={}".format(add(a, b)))
```
## 模块


### 1，什么是模块
在 Python 中，模块是一种组织 Python 代码的方法。 *模块可以包含定义（例如类、函数和变量）和可执行代码。* 如果当我们要使用的功能在模块中时，我们就可以导入模块，使用模块中的相应功能。也就是说：模块可以帮助你将代码组织得更有逻辑，并允许你将代码划分为更小的、更可管理的部分。
例如，我们想实现一些与时间相关的功能，我们就可以直接导入python中现有的time模块，然后调用time模块的功能帮我们实现。

### 2.模块的导入和使用
模块的导入一般写在文件的开头（这一点和C语言中，要包含对应的头文件类似，要写在开头）
导入的语法如下：
```
 import 模块名 (可以一次导入多个模块，模块名之间用逗号隔开)
 from 模块名 import 类、变量、方法等
 from 模块名 import *
 import 模块名 as 别名
 from 模块名 import 功能名 as 别名
```
```
import time  # 导入time模块
time.sleep(10)  # 通过 . 操作符使用功能

from time import sleep
from time import sleep  # 导入time模块的sleep功能
sleep(10)  # 直接使用功能

from time import sleep as al  # 导入time模块的sleep功能,给sleep设置别名：sl
al(10)  # 通过别名al来使用sleep功能
```
### 三，自定义模块
自定义模块其实就是创建一个以.py结尾的python文件，然后我们可以在这个文件里面写功能
（注意：自定义模块的命名要符合标识符的命名规则）
当我们需要调用这个文件里面的功能时，只需要导入这个模块就可以（模块名就是文件名）
例如，我们创建一个自定义模块:

使用它：
```
import test  # 导入我们的自定义模块
test.ptint1()  # 使用里面的功能
```

2，同名功能的选择
注意：当导入多个不同的模块，但模块内有同名功能，当调用这个同名功能时，*调用的是后面导入的模块的功能*

3，* 和__all__
* 导入:
在Python中，使用 from module_name import * 表示导入模块中的所有内容。
这会导入模块中的所有变量、函数和类，我们可以在当前命名空间中直接使用它们。
（注意：这种方法可以快速地导入模块中的所有内容，但可能导致命名冲突，因此通常不推荐使用）
__all__:
__all__ 是模块中的一个特殊变量，它定义了模块中应该被导入的内容。

### 列表和元组

```
l = [1,2,3,4,5]
t = (1,2,3,4,5)
```

- 索引访问列表
- 修改列表
- 求列表长度
- 列表切片
- 列表追加元素
- 列表合并
- 列表插入元素
- 列表删除元素
- 列表排序
- 列表拷贝
- 列表循环

### 字典

```python
my_dict = {"name": "Alice", "age": 25, "city": "New York"}
```

- 访问字典元素
- 修改字典元素
- 添加新的键值对
- 删除键值对
- 求字典大小
- 字典键列表
- 字典遍历
- 字典合并
- 字典拷贝
